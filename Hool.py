import streamlit as st
import pandas as pd
import altair as alt
from PIL import Image
import os
st.set_page_config(layout="wide")

def show_hool_bolovsruulalt():
    st.markdown('<style>div.block-container{padding-top:3rem;}</style>', unsafe_allow_html=True)
    image = Image.open('mnums.png')

    col1, col2 = st.columns([0.1, 0.9])
    with col1:
        st.image(image, width=100)

    html_title = """
        <style>
        .title-test {
        font-weight:bold;
        padding:5px;
        border-radius:6px
        }
        </style>
        <center><h1 class="title-test">–•“Ø–Ω –∞–º—ã–Ω —ç—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω –∏—Ö ”©–≥”©–≥–¥”©–ª</h1></center>
    """

    html_title2 = """
        <style>
        .title-test2 {
        font-weight:bold;
        padding:5px;
        border-radius:6px
        }
        </style>
        <center><h3 class="title-test2">”®–≤—á–Ω–∏–π –∞—á —Ö–æ–ª–±–æ–≥–¥–æ–ª –±“Ø—Ö–∏–π —Ö“Ø—Å–Ω—ç–≥—Ç–∏–π–Ω ”©–≥”©–≥–¥”©–ª</h3></center>
    """
    with col2:
        st.markdown(html_title, unsafe_allow_html=True)
        st.markdown(html_title2, unsafe_allow_html=True)

    col3, col4 = st.columns([0.50, 0.50])

    # st.markdown("–¢–∞–∞—Ä—Å–∞–Ω –±–∞–≥–∞–Ω—É—É–¥—ã–Ω —É—Ç–≥—É—É–¥—ã–≥ Stacked Bar Chart-—Ä —Ö–∞—Ä—É—É–ª–∞—Ö")

    # üìÇ disease_analysis —Ñ–∞–π–ª—ã–Ω sheet-“Ø“Ø–¥–∏–π–≥ —à–∞–ª–≥–∞—Ö
    xls_disease = pd.ExcelFile("disease_analysis_results 2.xlsx")
    k_sheets = [s for s in xls_disease.sheet_names if s.startswith('K')]

    with col3:
        selected_k_sheet = st.selectbox("üìë –•–æ–æ–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö —ç—Ä—Ö—Ç—ç–Ω —Ç–æ–≥—Ç–æ–ª—Ü–æ–æ–Ω—ã ”©–≤—á–ª”©–ª —Å–æ–Ω–≥–æ—Ö (K...):", k_sheets, key = "k_selection")

    # –°–æ–Ω–≥–æ—Å–æ–Ω K sheet-–∏–π–≥ —É–Ω—à–∏—Ö
    df1 = pd.read_excel(xls_disease, sheet_name=selected_k_sheet)

    # first_col –±–∞–≥–∞–Ω—ã–Ω –Ω—ç—Ä–∏–π–≥ —à–∞–ª–≥–∞—Ö
    if df1.empty:
        st.warning("–≠–Ω–¥ ”©–≥”©–≥–¥”©–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
    else:
        first_col = df1.columns[0]
        df1[first_col] = df1[first_col].astype(str).str.strip().str.lower()
        values1 = df1[first_col]  # values1 –∑”©–≤ “Ø“Ø—Å–≥—ç—Ö

        # p, rr, or, ppv –±–∞–≥–∞–Ω—É—É–¥ —à–∞–ª–≥–∞—Ö
        disease_columns = ['p_value', 'odds_ratio', 'adjusted_RR', 'ppv']
        disease_columns_existing = [col for col in disease_columns if col in df1.columns]

        # üìÇ med_data —Ñ–∞–π–ª —É–Ω—à–∏—Ö
        xls = pd.ExcelFile("med_data_export.xlsx")
        matched_columns = []

        # –¢–∞–∞—Ä—Å–∞–Ω –±–∞–≥–∞–Ω—É—É–¥—ã–≥ —Ö–∞–π—Ö
        for sheet_name in xls.sheet_names:
            df2 = pd.read_excel(xls, sheet_name=sheet_name)

            # –•–æ–æ—Å–æ–Ω sheet-–∏–π–≥ —à–∞–ª–≥–∞—Ö
            if df2.empty:
                continue  # –•–æ–æ—Å–æ–Ω sheet-–∏–π–≥ “Ø–ª —Ç–æ–æ—Ü–Ω–æ

            # ”®–≥”©–≥–¥–ª–∏–π–≥ –∑”©–≤ —Ü—ç–≤—ç—Ä–ª—ç–∂, —É—Ä–¥ –±–æ–ª–æ–Ω –∞—Ä–¥ –±–∞–π–≥–∞–∞ –æ—Ä–æ–Ω –∑–∞–π–≥ —É—Å—Ç–≥–∞–Ω–∞
            for v in values1:
                v_clean = v.strip().lower()  # value1 —É—Ç–≥—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
                for col in df2.columns:
                    col_clean = col.strip().lower()  # column –Ω—ç—Ä–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
                    if v_clean in col_clean:
                        matched_columns.append((sheet_name, col))

        # ‚úÖ UI —Å–æ–Ω–≥–æ–ª—Ç—É—É–¥
        if matched_columns:
            with col3:
                sheet_options = sorted(set([sheet for sheet, _ in matched_columns]))
                selected_sheet = st.selectbox("–•–∞–º–∞–∞—Ä–∞—Ö —Ö“Ø—Å–Ω—ç–≥—Ç —Å–æ–Ω–≥–æ—Ö:", sheet_options, key="table_selection")

            # with col4:
                filtered_columns = [col for sheet, col in matched_columns if sheet == selected_sheet]
                selected_columns = st.multiselect("–ì—Ä–∞—Ñ–∏–∫–∞–∞—Ä —Ö–∞—Ä–∞—Ö –±–∞–≥–∞–Ω—É—É–¥—ã–≥ —Å–æ–Ω–≥–æ—Ö:", filtered_columns)

            if selected_columns:
                # ”®–º–Ω”© –Ω—å –Ω—ç–≥ –±–∞–≥–∞–Ω–∞ —Å–æ–Ω–≥–æ–∂ –±–∞–π—Å–∞–Ω –±–æ–ª, –æ–¥–æ–æ –±“Ø—Ö —Å–æ–Ω–≥–æ–≥–¥—Å–æ–Ω –±–∞–≥–∞–Ω—É—É–¥—ã–≥ –Ω—ç–≥—ç–Ω –∑—ç—Ä—ç–≥ –≥—Ä–∞—Ñ–∏–∫—Ç —Ö–∞—Ä—É—É–ª–Ω–∞
                chart_df_list = []
                for selected_column in selected_columns:
                    df_selected = pd.read_excel(xls, sheet_name=selected_sheet)
                    values = df_selected[selected_column].astype(str).str.strip()
                    counts = values.value_counts().sort_index()
                
                    chart_df = pd.DataFrame({
                        "Value": counts.index,
                        "Count": counts.values,
                        "Column": [selected_column] * len(counts)
                    })
                
                    # üéØ disease_analysis –¥—ç—ç—Ä—ç—ç—Å —É—Ç–≥—É—É–¥—ã–≥ –æ–ª–æ—Ö
                    selected_column_clean = selected_column.strip().lower()
                    disease_row = df1[df1[first_col] == selected_column_clean]

                    if not disease_row.empty:
                        for col in disease_columns_existing:
                            chart_df[col] = disease_row[col].values[0]

                        chart_df_list.append(chart_df)  # –ë“Ø—Ö –±–∞–≥–∞–Ω—É—É–¥—ã–Ω –≥—Ä–∞—Ñ–∏–∫–∏–π–≥ –∂–∞–≥—Å–∞–∞–ª—Ç–∞–¥ –Ω—ç–º—ç—Ö

                # –ù–∏–π—Ç–ª—ç–Ω –∑—É—Ä—Å–∞–Ω –±“Ø—Ö –≥—Ä–∞—Ñ–∏–∫—É—É–¥—ã–≥ –Ω—ç–≥ –¥–æ—Ä —Ö–∞—Ä—É—É–ª–∞—Ö
                if chart_df_list:
                    final_df = pd.concat(chart_df_list, ignore_index=True)

                    bar = alt.Chart(final_df).mark_bar(size=80).encode(
                        x=alt.X("Column:N", title="–ë–∞–≥–∞–Ω–∞"),
                        y=alt.Y("Count:Q", title="–¢–æ–æ —Ö—ç–º–∂—ç—ç", stack='zero'),
                        color=alt.Color("Value:N", title="–£—Ç–≥–∞", scale=alt.Scale(domain=['0', '1'], range=['blue', 'red'])),
                        tooltip=["Value", "Count"] + disease_columns_existing
                    )
                    
                    text = alt.Chart(final_df).mark_text(
                        align="center",
                        baseline="middle",
                        dx=0,
                        dy=5,
                        color="white"
                    ).encode(
                        x=alt.X("Column:N", title="–ë–∞–≥–∞–Ω–∞"),
                        y=alt.Y("Count:Q", title="–¢–æ–æ —Ö—ç–º–∂—ç—ç"),
                        detail="Value:N",
                        text=alt.Text("Count:Q")
                    )

                    chart = (bar+text).properties(
                        width=600,
                        height=400,
                        title="K ”©–≤—á–Ω–∏–π –∞—á —Ö–æ–ª–±–æ–≥–¥–æ–ª—Ç –±–∞–≥–∞–Ω–∞"
                    )
        
                    # 1-—Ä –≥—Ä–∞—Ñ–∏–∫: disease_analysis “Ø–Ω–¥—ç—Å–ª—ç–ª—Ç—ç–π –≥—Ä–∞—Ñ–∏–∫
                    # col5, col6 = st.columns(2)
                    with col3:
                        st.divider()
                        st.altair_chart(chart, use_container_width=True)
                else:
                    with col3:
                        st.warning("–°–æ–Ω–≥–æ—Å–æ–Ω –±–∞–≥–∞–Ω—É—É–¥ disease_analysis —Ñ–∞–π–ª–¥ —Ç–∞–∞—Ä–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
            else:
                with col3:
                    st.warning("–ë–∞–≥–∞–Ω—É—É–¥—ã–≥ —Å–æ–Ω–≥–æ–æ–≥“Ø–π –±–∞–π–Ω–∞, –±–∞–≥–∞–Ω–∞ —Å–æ–Ω–≥–æ—Ö —Ö—ç—Å–≥—ç—ç—Å —Å–æ–Ω–≥–æ–Ω–æ —É—É!")
        else:
            with col3:
                st.warning("–¢–∞–∞—Ä—Å–∞–Ω –±–∞–≥–∞–Ω–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")

    with col4:
        st.markdown("–•–æ–æ–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö ”©–≤—á–Ω–∏–π BD_with_one_hot_diagnoses —Ö“Ø—Å–Ω—ç–≥—Ç–∏–π–Ω –¥–∞—Ç–∞")

    # Excel —Ñ–∞–π–ª
    excel_file = 'BD_with_one_hot_diagnoses.xlsx'

    # –§–∞–π–ª —à–∞–ª–≥–∞—Ö
    if not os.path.exists(excel_file):
        st.error(f"'{excel_file}' —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
    else:
        xls = pd.ExcelFile(excel_file)
        sheet_names = xls.sheet_names

        all_data = []

        for sheet in sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet)

            k_columns = [col for col in df.columns if str(col).startswith("K")]

            for col in k_columns:
                if set(df[col].dropna().unique()).issubset({0, 1}):
                    counts = df[col].value_counts().to_dict()
                    all_data.append({
                        "sheet": sheet,
                        "column": col,
                        "column_id": f"{sheet} | {col}",
                        "value": "0",
                        "count": counts.get(0, 0)
                    })
                    all_data.append({
                        "sheet": sheet,
                        "column": col,
                        "column_id": f"{sheet} | {col}",
                        "value": "1",
                        "count": counts.get(1, 0)
                    })

        if all_data:
            chart_df = pd.DataFrame(all_data)

            # ‚úÖ Multiselect: —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–ª—å –±–∞–≥–∞–Ω—É—É–¥—ã–≥ —Ö–∞—Ä–∞—Ö—ã–≥ —Å–æ–Ω–≥–æ–Ω–æ
            all_column_ids = sorted(chart_df['column_id'].unique())
            with col4:
                selected_columns = st.multiselect(
                    "üìå –ë–∞–≥–∞–Ω—É—É–¥ —Å–æ–Ω–≥–æ—Ö (sheet | column —Ö—ç–ª–±—ç—Ä—ç—ç—Ä)",
                    options=all_column_ids,
                    default=all_column_ids[:5]  # –∞–Ω—Ö–Ω—ã 5-–≥ default —Å–æ–Ω–≥–æ–Ω–æ
            )


            if selected_columns:
                filtered_df = chart_df[chart_df['column_id'].isin(selected_columns)]

                with col4:
                    st.subheader("üìä –°–æ–Ω–≥–æ—Å–æ–Ω –±–∞–≥–∞–Ω—É—É–¥—ã–Ω Stacked Bar Chart")
               
                bar2 = alt.Chart(filtered_df).mark_bar(size=15).encode(
                    x=alt.X('column_id:N', title='Sheet | –ë–∞–≥–∞–Ω–∞', sort=None),
                    y=alt.Y('count:Q', title='–¢–æ–æ —à–∏—Ä—Ö—ç–≥', stack='zero'),
                    color=alt.Color('value:N', title='–£—Ç–≥–∞', scale=alt.Scale(domain=['0','1'], range=['blue','red'])),
                    tooltip=['sheet', 'column', 'value', 'count']
                )
                
                text2 = alt.Chart(filtered_df).mark_text(
                    align="center",
                    baseline="middle",
                    dx=0,
                    dy=0,
                    color="white"
                ).encode(
                    x=alt.X("column_id:N", title="–ë–∞–≥–∞–Ω–∞"),
                    y=alt.Y("count:Q",title="–¢–æ–æ —Ö—ç–º–∂—ç—ç"),
                    detail="value:N",
                    text=alt.Text("count:Q")
                )

                chart2 = (bar2+text2).properties(
                    width=600,
                    height=400,
                    title="K ”©–≤—á–Ω–∏–π BD_with_one_hot_diagnoses —Ö“Ø—Å–Ω—ç–≥—Ç–∏–π–Ω –≥—Ä–∞—Ñ–∏–∫"
                )
              

                # 2-—Ä –≥—Ä–∞—Ñ–∏–∫: one-hot –±–∞–≥–∞–Ω—É—É–¥—ã–Ω stacked chart
                # col5, col6 = st.columns(2)
                with col4:
                    st.divider()
                    st.altair_chart(chart2, use_container_width=True)
            else:
                st.info("–≠—Ö–ª—ç—ç–¥ –∂–∞–≥—Å–∞–∞–ª—Ç–∞–∞—Å –±–∞–≥–∞–Ω—É—É–¥ —Å–æ–Ω–≥–æ–Ω–æ —É—É.")
        else:
            st.warning("K-—ç—ç—Ä —ç—Ö—ç–ª—Å—ç–Ω one-hot –±–∞–≥–∞–Ω—É—É–¥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")

# show_hool_bolovsruulalt()
